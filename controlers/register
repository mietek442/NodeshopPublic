const express = require("express");
const router = express.Router();
const bcrypt = require("bcrypt");
const app = express();

const { body, validationResult } = require("express-validator");

app.use(express.json());

async function checkIfUserExists(email) {
  return new Promise((resolve, reject) => {
    const SQL = "SELECT * FROM `users` WHERE email = ?";
    const values = [email];
    db.query(SQL, values, (err, rows) => {
      if (err) {
        reject(err);
      } else {
        resolve(rows.length > 0);
      }
    });
  });
}

async function addUser(email, username, password) {
  return new Promise((resolve, reject) => {
    const SQL = "INSERT INTO users (email,username,password) VALUES (?,?,?)";
    const values = [email, username, password];
    db.query(SQL, values, (err, result) => {
      if (err) {
        reject(err);
      } else {
        resolve();
      }
    });
  });
}

router.post(
  "/",
  [
    body("Email").isEmail().withMessage("Please write corect Mail"),

    body("Password")
      .isLength({ min: 8 })
      .withMessage("Password must contains over 8 characters")
      .matches(/^(?=.*[!@#$%^&*()\-_=+{};:,<.>])|(?=.*[A-Z])|(?=.*\d)/)
      .withMessage(
        "pass is to simply add either !-? or CAPITAL LETTER or a 123.."
      )
      .blacklist("Password"),
  ],
  async (req, res) => {
    // create new user

    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      //return erors
      return res.status(400).json({ errors: errors.array() });
    }
    const passFromForm = req.body.Password;
    const userPassEncrypt = await bcrypt.hash(passFromForm, 10);
    const sentEmail = req.body.Email;
    const sentUserName = req.body.UserName;
    const sentPassword = userPassEncrypt;

    try {
      const userExists = await checkIfUserExists(sentEmail);
      if (userExists) {
        res.send({ message: "User already exists" });
      } else {
        await addUser(sentEmail, sentUserName, sentPassword);
        res.send({ message: "User added" });
      }
    } catch (error) {
      res.status(500).send({ message: "Internal Server Error" });
      console.error("Error:", error);
    }
  }
);

module.exports = router;
