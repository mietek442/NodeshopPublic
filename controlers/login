const express = require("express");
const router = express.Router();
const bcrypt = require("bcrypt");
require("dotenv").config();
const app = express();

const jwt = require("jsonwebtoken");
const { body, validationResult } = require("express-validator");

app.use(express.json());
function generateAccessToken(username) {
  return jwt.sign(username, process.env.JWTPASS, {
    expiresIn: "1800s",
  });
}
router.post(
  "/",
  [
    body("mail").isEmail().withMessage("Please write corect Mail"),
    body("password")
      .isLength({ min: 1 })
      .withMessage("Password can not be null"),
    // .blacklist("Password"),
  ],
  async (req, red) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      //return erors
      return red.status(400).json({ errors: errors.array() });
    }
    const checkemail = req.body.mail;
    const checkpass = req.body.password;

    await console.log(checkpass);

    if (checkemail.length < 1 || checkpass.length < 1) {
      red.status(401).json({ error: "Unauthorized" });
    } else {
      const userService = require("../service/user");
      const user = await userService.getUserByMail(checkemail);
      console.log(userService.getUserById(1));
      if (user.length > 0) {
        const passfromdb = user[0].password;
        console.log(user[0].password, "   ", checkpass);
        //uystaiwanie cokiesu√≥w

        if (bcrypt.compareSync(checkpass, passfromdb)) {
          // ustawianie cookies
          console.log("the same password");
          id = user.id;
          const tokenseted = generateAccessToken({
            id: id,
          });
          req.session.views = tokenseted;
          red
            .status(400)
            .json({ dbstatus: "User Logged", response: tokenseted });
        } else {
          red.status(400).json({
            errors: [
              {
                type: "field",
                value: "password",
                msg: "Password Incorrect",
                path: "password",
                location: "body",
              },
            ],
          });
        }
      } else {
        red.status(400).json({
          errors: [
            {
              type: "field",
              value: checkemail,
              msg: "Mail not exist",
              path: "mail",
              location: "body",
            },
          ],
        });
      }
    }
  }
);
module.exports = router;
